// algorithm and data structure to compute the rank of integers belonging to a stream

// assumption: 
// 1) there is a function track(int x) that insert each integer into the data structure
// 2)there is a function getRank(int x) that find the integer into the data structure and return the rank
// 3) the data structure is a BST: keep data sorted with insert/find in O(logn)

#include <random>
#include <iostream>

class Rank {
  struct BstNode {
    int value;
    int size_left;
    BstNode *left, *right;
    BstNode (int value): value(value), size_left(0), left(nullptr), right(nullptr){}
  };

  typedef BstNode* Link;
  Link root;
  void track (Link& v, int x);
  int getRank (Link v, int x);
  void inorder(Link v);//debug
  void dump (std::ostream& out, Link t, int h);;//debug
public:
  Rank (): root(nullptr){}
  void track (int x);
  int getRank (int x);
  void inorder(void);;//debug
  void dump (std::ostream& out, int h);//debug
};

void Rank::dump (std::ostream& out, int h) {
  dump(out, root, h);
}

void Rank::dump (std::ostream& out, Link t, int h) {

  if (t == 0) {
    for (int i = 0; i < h; ++i) {
      out << " ";
    }
    out << "*" << std::endl;
    return;
  }

  dump (out, t->right, h+1);
  for (int i = 0; i < h; ++i) {
      out << " ";
  }
  out << t->value << std::endl;
  dump (out, t->left, h+1);
}


void Rank::inorder (void) {
  inorder(root);
}

void Rank::inorder (Link v) {
  if (v == nullptr) return;
  inorder(v->left);
  std::cout << v->value << " r: " << v->size_left << "\n";
  inorder(v->right);
}

void Rank::track (int x) {
  track(root, x);
}

void Rank::track (Link& v,int x) {
  if (v == nullptr) {v = new BstNode(x); return;}
  if (x <= v->value) {
    track(v->left, x);
    v->size_left++;//track the size of the left subtree
  }
  else track(v->right,x);
}

int Rank::getRank (Link v, int x) {
  if (!v) return -1;
  if (v->value == x) return v->size_left;
  if (x < v->value) return getRank(v->left, x);
  else return 1 + v->size_left + getRank(v->right, x);
}

int Rank::getRank (int x) {
  return getRank(root, x);
}

int main (void) {

  std::random_device rd;  //Will be used to obtain a seed for the random number engine
  std::mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
  std::uniform_int_distribution<> dis(1, 50);
  Rank rank;
  for (int n =0 ; n < 15; ++n) {
    //Use dis to transform the random unsigned int generated by gen into an int in [1, 6]
    int x = dis(gen);
    std::cout << x  << ' ';
    rank.track(x);
  }
  std::cout << "\n";
  //rank.inorder();
  //rank.dump(std::cout,0);
  int y;
  while (std::cin >> y) {
    std::cout << rank.getRank(y);
  }
  
}
