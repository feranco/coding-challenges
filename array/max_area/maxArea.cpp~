/*****************************************************************************************************************/
 /* Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). 
 * n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). 
 * Find two lines, which together with x-axis forms a container, such that the container contains the most water.
 * Note: You may not slant the container and n is at least 2.
 * https://leetcode.com/problems/container-with-most-water/description/
/***************************************************************************************************************/

#include <algorithm>
#include <vector>
#include <iostream>
#include <stack>

using namespace std;

// Brute force solution using two pointers: O(n^2)
// For each line l iterate through all the previous lines
// computing the area between l and the previous one and
// updating the max area when required
int maxArea(vector<int>& height) {

  int maxArea = 0;
  
  for (int i = 1; i < height.size(); ++i) {
    for (int j = 0; j < i; ++j) {
      int area = min(height[i],height[j]) * (i-j); //max area ending at line i
      maxArea = max(area,maxArea);
    }
  }

  return maxArea;
}


// Observation: the max area ending at each line l is the one
// between l and the previous line taller than l
// Result: while processing each line l we need
// to keep track only of the previous lines taller than l
// because only those line could be used to compute the max area ending in l.
// Solution: use a stack to keep track of the lines; when a line l has been processed,
// pop all line shorter than l (if they exists) and push l
// O(n)
int maxArea(vector<int>& height) {

  int maxArea = 0;
  stack<int> previous_lines;
  previous_lines.push(height[0]);

  for (int i = 1; i < height.size(); ++i) {
    
    int area = 0;
    int idx = previous_lines.top();

    if
   
    while (previous_lines.size() > 1 && height[idx] < height[i]) {     
      previous_lines.pop();
      idx = previous_lines.top();
    }
    
    area = height[i] * (i-idx);
    previous_lines.push(i);
    maxArea = max(maxArea,area);
  }
  return maxArea;
}


